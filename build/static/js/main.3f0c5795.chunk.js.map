{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/dfs.js","algorithms/bfs.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","onMousePressed","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","getNeighbors","PathfindingVisualizer","state","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","mouseIsPressed","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","animateShortestPathDfs","stack","pop","console","log","dfs","getNodesInShortestPathOrderDfs","animateDfs","animateShortestPathBfs","bfs","getNodesInShortestPathOrderBfs","animateBfs","onClick","visualizeDijkstra","visualizeDfs","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3f0c5795.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Node.css\";\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n    } = this.props;\n    const extraClassName = isFinish\n      ? \"node-finish\"\n      : isStart\n      ? \"node-start\"\n      : isWall\n      ? \"node-wall\"\n      : \"\";\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMousePressed={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}\n      ></div>\n    );\n  }\n}\n","export function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    if (closestNode.isWall) continue;\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","export function dfs(grid,startNode,finishNode){\n    const visitedNodesInOrder = [];\n    const stack = [];\n    startNode.distance = 0;\n    stack.push(startNode);\n    //const unvisitedNodes = getAllNodes(grid);\n    while(!!stack.length){\n        const closestNode = stack.pop();\n        if (closestNode.isWall) continue;\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n        if (closestNode === finishNode) return visitedNodesInOrder;\n        const neighbors =getNeighbors(closestNode,grid);\n        for (let neighbor of neighbors){\n            stack.push(neighbor);\n        }\n        console.log(stack);\n        \n    }\n}\n\nfunction getNeighbors(node,grid){\n    const neighbors = [];\n    const { col, row } = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    for (let neighbor of neighbors){\n        if (!neighbor.isVisited)\n            neighbor.previousNode = node;\n    }\n    return neighbors.filter((neighbor) => !neighbor.isVisited);\n    \n}\n/*\n\nfunction getAllNodes(grid){\n    const nodes= [];\n    for (const row of grid){\n        for (const node of row){\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n*/\nexport function getNodesInShortestPathOrderDfs(finishNode){\n    let currentNode = finishNode;\n    const nodesInShortestPathOrder = [];\n    while (currentNode !== null){\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}","\nexport function bfs(grid,startNode,finishNode){\n    const visitedNodesInOrder = [];\n    const stack = [];\n    startNode.distance = 0;\n    stack.push(startNode);\n    while(!!stack.length){\n        const closestNode = stack.shift();\n        console.log(closestNode.isVisited);\n        if (closestNode.isWall) continue;\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n        if (closestNode === finishNode) return visitedNodesInOrder;\n        const neighbors =getNeighbors(closestNode,grid);\n        for (let neighbor of neighbors){\n            stack.push(neighbor);\n        }\n        //console.log(stack);\n    }\n    console.log(\"krishna  \");\n}\n\nfunction getNeighbors(node,grid){\n    const neighbors = [];\n    const { col, row } = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n\n    for (let neighbor of neighbors){\n        if (!neighbor.isVisited)\n            neighbor.previousNode = node;\n    }\n    return neighbors.filter((neighbor) => !neighbor.isVisited);\n    \n}\n\n/*\nfunction getAllNodes(grid){\n    const nodes= [];\n    for (const row of grid){\n        for (const node of row){\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n*/\n\nexport function getNodesInShortestPathOrderBfs(finishNode){\n    let currentNode = finishNode;\n    const nodesInShortestPathOrder = [];\n    while (currentNode !== null){\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}\n\n\n\n\n\n\n\n\n\n/*\nexport function bfs(grid,startNode,finishNode){\n    const visitedNodesInOrder = [];\n    const queue = [];\n    startNode.distance = 0;\n    queue.push(startNode);\n    while(!!queue.length){\n        let closestNode = queue.shift();\n        if (closestNode.isWall) continue;\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n        if (closestNode === finishNode) return visitedNodesInOrder;\n        let neighbors =getNeighbors(closestNode,grid);\n        for (let neighbor of neighbors){\n            queue.push(neighbor);\n        }\n        console.log(queue);\n        \n    }\n}\n\nfunction getNeighbors(node,grid){\n    const neighbors = [];\n    const { col, row } = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    for (let neighbor of neighbors){\n        if (!neighbor.isVisited)\n            neighbor.previousNode = node;\n    }\n    return neighbors.filter((neighbor) => !neighbor.isVisited);\n    \n}\n\nexport function getNodesInShortestPathOrderBfs(finishNode){\n    let currentNode = finishNode;\n    const nodesInShortestPathOrder = [];\n    while (currentNode !== null){\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}\n*/","import React from \"react\";\nimport { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport \"./PathfindingVisualizer.css\";\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\nimport {dfs,getNodesInShortestPathOrderDfs} from \"../algorithms/dfs\";\nimport {bfs,getNodesInShortestPathOrderBfs} from \"../algorithms/bfs\";\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n\n  animateDfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPathDfs(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPathDfs(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, 50 * i);\n    }\n  }\n\n\n  visualizeDfs(){\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dfs(grid,startNode,finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrderDfs(finishNode);\n    this.animateDfs(visitedNodesInOrder,nodesInShortestPathOrder);\n  }\n\n\n\n\n\n  animateBfs(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPathBfs(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPathBfs(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, 50 * i);\n    }\n  }\n\n\n  visualizeBfs(){\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = bfs(grid,startNode,finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrderBfs(finishNode);\n    this.animateBfs(visitedNodesInOrder,nodesInShortestPathOrder);\n  }\n\n  \n\n  render() {\n    const { grid } = this.state;\n\n    return (\n      <>\n        <div className=\"button\">\n          <button className=\"button1\" onClick={() => this.visualizeDijkstra()}>\n            Visualize Dijkstra's Algorithm\n          </button>\n          <button className=\"button1\" onClick={()=> this.visualizeDfs()}>\n            Visualize DFS Algorithm\n          </button>\n          \n        </div>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {\n                    row,\n                    col,\n                    isFinish,\n                    isStart,\n                    isWall,\n                    mouseIsPressed,\n                  } = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = grid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <PathfindingVisualizer></PathfindingVisualizer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}